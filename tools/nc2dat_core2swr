#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Qing Li, 20180722

import argparse
import sys
import numpy as np
import pandas as pd
from netCDF4 import Dataset
from gotmtool import nctime_to_datetime, nctime_indices, write_ts, get_index_lat_lon_nearest

def main():
    # process the input arguments
    parser = argparse.ArgumentParser(description="""
            Read the daily maximum shortwave radiation from COREII in netCDF
            format, add an idealized diurnal cycle, and output the hourly
            shortwave radiation in a text file in the GOTM input file format.""")
    parser.add_argument('-i', '--input', action='store', dest='fname_in',
            metavar='NCFILENAME', required=True, help='Input netCDF filename')
    parser.add_argument('-o', '--output', action='store', dest='fname_out',
            metavar='DATFILENAME', required=True, help='Output filename')
    parser.add_argument('-lat', '--latitude', action='store', dest='lat',
            metavar='LATITUDE', required=True,
            help='Latitude of the requested location (-85, 85)')
    parser.add_argument('-lon', '--longitude', action='store', dest='lon',
            metavar='LONGITUDE', required=True,
            help='Longitude of the requested location (-180, 360)')
    parser.add_argument('-ds', '--date_start', action='store', dest='date_start',
            metavar='STARTDATE',
            help='Starting date of input data, in the format of YYYYMMDD')
    parser.add_argument('-de', '--date_end', action='store', dest='date_end',
            metavar='ENDDATE',
            help='Ending date of input data, in the format of YYYYMMDD')
    parser.add_argument('-ref', '--ref_file', action='store', dest='ref_file',
            metavar='REFFILE',
            help='Reference file for diurnal cycle')
    parser.add_argument('--version', action='version', version='%(prog)s: 1.1')
    # parsing arguments and save to args
    args=parser.parse_args()

    fname_in = args.fname_in
    fname_out = args.fname_out
    date_start = args.date_start
    date_end = args.date_end
    rlat = float(args.lat)
    rlon = float(args.lon)
    if rlon >= 180:
        rlon = rlon - 360.0

    if rlat > 85.0 or rlat < -85.0 or rlon > 180.0 or rlon < -180.0:
        parser.print_help()
        sys.exit(1)

    ref_file = args.ref_file

    # print out some message
    print('Converting {} to {}...'.format(fname_in, fname_out))

    # read data
    infile = Dataset(fname_in, 'r')
    # time
    nctime = infile.variables['TIME']
    dttime = nctime_to_datetime(nctime) # time in datetime format
    # get starting and ending indices
    tidx_start, tidx_end = nctime_indices(nctime, date_start, date_end)

    # number of days
    ndays = tidx_end-tidx_start+1
    dtday = dttime[tidx_start:tidx_end+1]

    # read latitude and longitude
    lat = infile.variables['LAT'][:]
    lon = infile.variables['LON'][:]

    # get index of target location
    lon2d, lat2d = np.meshgrid(lon, lat)
    ilat, ilon = get_index_lat_lon_nearest(lat2d, lon2d, rlat, rlon)
    ind_lat = ilat[0]
    ind_lon = ilon[0]

    print('Target location ({}, {})'.format(rlon, rlat))
    print('Interpolated location ({}, {})'.format(lon[ind_lon], lat[ind_lat]))

    # read daily averaged shortwave radiation
    swr = infile.variables['SWDN_MOD'][tidx_start:tidx_end+1,ind_lat,ind_lon]

    if ref_file is None:
        # add idealized diurnal cycle according to
        # factor[t] = np.sin(np.pi*(t-6.)/12.)**2 # t in [6, 18]
        tdat = []
        swr_hourly = np.zeros(ndays*24)
        diurnal_factor = np.zeros(24)
        for j in np.arange(6, 19):
            if j == 6:
                t1 = j
                t2 = j+0.5
            elif j == 18:
                t1 = j-0.5
                t2 = j
            else:
                t1 = j-0.5
                t2 = j+0.5
            diurnal_factor[j] = integral_dirunal_factor(t2)-integral_dirunal_factor(t1)

        int_factor = np.sum(diurnal_factor)
        diurnal_factor = 24./int_factor*diurnal_factor

        for i in np.arange(ndays):
            for j in np.arange(24):
                k = i*24+j
                dttemp = dtday[i].replace(hour=j)
                tdat.append(dttemp.strftime('%Y-%m-%d %H:%M:%S'))
                swr_hourly[k] = swr[i]*diurnal_factor[j]

        # variables
        vdat = [swr_hourly]
    else:
        tdat = []
        vdatlist = []
        # use diurnal cycle from the reference file
        df = pd.read_csv(ref_file, sep='\s+', header=None, names=["date", "time", "swr"])
        for i in np.arange(ndays):
            date_str = dtday[i].strftime('%Y-%m-%d')
            inds = df['date'] == date_str
            wgt = df['swr'][inds].values
            tmp = daily_to_xhourly(8, swr[i], wgt)
            for j in np.arange(wgt.size):
                tdat.append(df['date'][inds].values[j]+' '+df['time'][inds].values[j])
                vdatlist.append(tmp[j])
        vdat = [np.array(vdatlist)]

    # write to output file
    write_ts(fname_out, tdat, vdat)

def integral_dirunal_factor(t):
    # idealized diurnal cycle according to
    # factor[t] = np.sin(np.pi*(t-6.)/12.)**2 # t in [6, 18]
    # whose integral is
    a=0.5*t+3./np.pi*np.sin(np.pi*t/6.)
    return a

def daily_to_xhourly(nx, vd, vwgt):
    # convert daily mean value to x-hourly mean
    nx = np.minimum(nx, vwgt.size)
    vsum = np.maximum(np.sum(vwgt), 1e-6)
    wgt = vwgt/vsum
    out = vd*wgt*nx
    return out

if __name__ == "__main__":
    main()
